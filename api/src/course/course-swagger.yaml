---
swagger: "2.0"
info:
  version: 1.0.0
  title: max-aldunate-pro API
  description: Max's professional site. Secure, Serverless, Tested, CI/CD Site
  termsOfService: http://max.aldunate.pro/terms/
  contact:
    name: Max Aldunate
    email: max@aldunate.pro
    url: https://max.aldunate.pro
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
host: max.aldunate.pro
basePath: /v1
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json
paths:
  /course:
    get:
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FnCourse.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "aws_proxy"
        responses: {}
      operationId: getById
      description: get by id
      parmeters:
        - name: id
          in: query
          required: ture
          schema:
            type: string
      responses:
        '200':
          description: get course by id
          content:
            application/json:
              schema:
                $ref : '#/definitions/Course'
        '400':
          description: Bad request

definitions:

  Course:
    type: object
    properties:
      id:
        type: string
        format: uuid
      name:
        type: string
      idSchoolOwner:
        type: string
        format: uuid
      dateStart:
        type: string
        format: date
      dateEnd:
        type: string
        format: date
      description:
        type: string
      level:
        type: string
        enum: [novice, mid, hi, super, pro]
    required:
      - id
      - name
      - idSchoolOwner
      - dateStart
      - dateEnd
      - description

  Monitor:
    type: object
    required:
      - id
      - name
      - idSchoolOwner
    properties:
      id:
        type: string
        format: uuid
      name:
        type: string
      idSchoolOwner:
        type: string
        format: uuid
      telefono:
        type: string
        format: date
      foto:
        type: string
        format: date
      level:
        type: string
        enum: [novice, mid, hi, super, pro]

  School:
    type: object
    required:
      - id
      - name
    properties:
      id:
        type: string
        format: uuid
      name:
        type: string
      address:
        type: string
        format: uuid
      phone:
        type: string
        format: uuid
      email:
        type: string
        format: date

  Student:
    type: object
    required:
      - id
      - name
    properties:
      id:
        type: string
        format: uuid
      name:
        type: string
      address:
        type: string
        format: uuid

  Error:
    type: object
    properties:
      code:
        type: string
      message:
        type: string
    required:
      - code
      - message

  Responses:
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/definitions/Error'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/definitions/Error'
    type: object
    properties:
      code:
        type: integer
        format: int32
      type:
        type: string
      message:
        type: string
